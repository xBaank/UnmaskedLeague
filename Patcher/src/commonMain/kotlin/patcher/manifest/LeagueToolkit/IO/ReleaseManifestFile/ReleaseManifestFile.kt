// automatically generated by the FlatBuffers compiler, do not modify

package LeagueToolkit.IO.ReleaseManifestFile

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class ReleaseManifestFile : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ReleaseManifestFile {
        __init(_i, _bb)
        return this
    }
    val id : ULong
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getLong(o + bb_pos).toULong() else 0UL
        }
    val parentId : ULong
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getLong(o + bb_pos).toULong() else 0UL
        }
    val size : UInt
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    val name : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    val languageFlags : ULong
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getLong(o + bb_pos).toULong() else 0UL
        }
    val unknown5 : Byte
        get() {
            val o = __offset(14)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    val unknown6 : Byte
        get() {
            val o = __offset(16)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    fun chunkIds(j: Int) : ULong {
        val o = __offset(18)
        return if (o != 0) {
            bb.getLong(__vector(o) + j * 8).toULong()
        } else {
            0uL
        }
    }
    val chunkIdsLength : Int
        get() {
            val o = __offset(18); return if (o != 0) __vector_len(o) else 0
        }
    val chunkIdsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 8)
    fun chunkIdsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 8)
    val unk8 : Byte
        get() {
            val o = __offset(20)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    val link : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val linkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun linkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    val unknown10 : Byte
        get() {
            val o = __offset(24)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    val chunkingParametersIndex : Byte
        get() {
            val o = __offset(26)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    val permissions : Byte
        get() {
            val o = __offset(28)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsReleaseManifestFile(_bb: ByteBuffer): ReleaseManifestFile = getRootAsReleaseManifestFile(_bb, ReleaseManifestFile())
        fun getRootAsReleaseManifestFile(_bb: ByteBuffer, obj: ReleaseManifestFile): ReleaseManifestFile {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createReleaseManifestFile(builder: FlatBufferBuilder, id: ULong, parentId: ULong, size: UInt, nameOffset: Int, languageFlags: ULong, unknown5: Byte, unknown6: Byte, chunkIdsOffset: Int, unk8: Byte, linkOffset: Int, unknown10: Byte, chunkingParametersIndex: Byte, permissions: Byte) : Int {
            builder.startTable(13)
            addLanguageFlags(builder, languageFlags)
            addParentID(builder, parentId)
            addID(builder, id)
            addLink(builder, linkOffset)
            addChunkIDs(builder, chunkIdsOffset)
            addName(builder, nameOffset)
            addSize(builder, size)
            addPermissions(builder, permissions)
            addChunkingParametersIndex(builder, chunkingParametersIndex)
            addUnknown10(builder, unknown10)
            addUnk8(builder, unk8)
            addUnknown6(builder, unknown6)
            addUnknown5(builder, unknown5)
            return endReleaseManifestFile(builder)
        }
        fun startReleaseManifestFile(builder: FlatBufferBuilder) = builder.startTable(13)
        fun addID(builder: FlatBufferBuilder, id: ULong) = builder.addLong(0, id.toLong(), 0)
        fun addParentID(builder: FlatBufferBuilder, parentId: ULong) = builder.addLong(1, parentId.toLong(), 0)
        fun addSize(builder: FlatBufferBuilder, size: UInt) = builder.addInt(2, size.toInt(), 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(3, name, 0)
        fun addLanguageFlags(builder: FlatBufferBuilder, languageFlags: ULong) = builder.addLong(4, languageFlags.toLong(), 0)
        fun addUnknown5(builder: FlatBufferBuilder, unknown5: Byte) = builder.addByte(5, unknown5, 0)
        fun addUnknown6(builder: FlatBufferBuilder, unknown6: Byte) = builder.addByte(6, unknown6, 0)
        fun addChunkIDs(builder: FlatBufferBuilder, chunkIds: Int) = builder.addOffset(7, chunkIds, 0)
        fun createChunkIdsVector(builder: FlatBufferBuilder, data: ULongArray) : Int {
            builder.startVector(8, data.size, 8)
            for (i in data.size - 1 downTo 0) {
                builder.addLong(data[i].toLong())
            }
            return builder.endVector()
        }
        fun startChunkIdsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(8, numElems, 8)
        fun addUnk8(builder: FlatBufferBuilder, unk8: Byte) = builder.addByte(8, unk8, 0)
        fun addLink(builder: FlatBufferBuilder, link: Int) = builder.addOffset(9, link, 0)
        fun addUnknown10(builder: FlatBufferBuilder, unknown10: Byte) = builder.addByte(10, unknown10, 0)
        fun addChunkingParametersIndex(builder: FlatBufferBuilder, chunkingParametersIndex: Byte) = builder.addByte(11, chunkingParametersIndex, 0)
        fun addPermissions(builder: FlatBufferBuilder, permissions: Byte) = builder.addByte(12, permissions, 0)
        fun endReleaseManifestFile(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}

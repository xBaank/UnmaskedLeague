// automatically generated by the FlatBuffers compiler, do not modify

package LeagueToolkit.IO.ReleaseManifestFile

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class ReleaseManifestLanguage : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ReleaseManifestLanguage {
        __init(_i, _bb)
        return this
    }
    val id : Byte
        get() {
            val o = __offset(4)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    val name : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsReleaseManifestLanguage(_bb: ByteBuffer): ReleaseManifestLanguage = getRootAsReleaseManifestLanguage(_bb, ReleaseManifestLanguage())
        fun getRootAsReleaseManifestLanguage(_bb: ByteBuffer, obj: ReleaseManifestLanguage): ReleaseManifestLanguage {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createReleaseManifestLanguage(builder: FlatBufferBuilder, id: Byte, nameOffset: Int) : Int {
            builder.startTable(2)
            addName(builder, nameOffset)
            addID(builder, id)
            return endReleaseManifestLanguage(builder)
        }
        fun startReleaseManifestLanguage(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addID(builder: FlatBufferBuilder, id: Byte) = builder.addByte(0, id, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(1, name, 0)
        fun endReleaseManifestLanguage(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}

// automatically generated by the FlatBuffers compiler, do not modify

package LeagueToolkit.IO.ReleaseManifestFile

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class ReleaseManifestBundle : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ReleaseManifestBundle {
        __init(_i, _bb)
        return this
    }
    val id : ULong
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getLong(o + bb_pos).toULong() else 0UL
        }
    fun chunks(j: Int) : LeagueToolkit.IO.ReleaseManifestFile.ReleaseManifestBundleChunk? = chunks(LeagueToolkit.IO.ReleaseManifestFile.ReleaseManifestBundleChunk(), j)
    fun chunks(obj: LeagueToolkit.IO.ReleaseManifestFile.ReleaseManifestBundleChunk, j: Int) : LeagueToolkit.IO.ReleaseManifestFile.ReleaseManifestBundleChunk? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val chunksLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsReleaseManifestBundle(_bb: ByteBuffer): ReleaseManifestBundle = getRootAsReleaseManifestBundle(_bb, ReleaseManifestBundle())
        fun getRootAsReleaseManifestBundle(_bb: ByteBuffer, obj: ReleaseManifestBundle): ReleaseManifestBundle {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createReleaseManifestBundle(builder: FlatBufferBuilder, id: ULong, chunksOffset: Int) : Int {
            builder.startTable(2)
            addID(builder, id)
            addChunks(builder, chunksOffset)
            return endReleaseManifestBundle(builder)
        }
        fun startReleaseManifestBundle(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addID(builder: FlatBufferBuilder, id: ULong) = builder.addLong(0, id.toLong(), 0)
        fun addChunks(builder: FlatBufferBuilder, chunks: Int) = builder.addOffset(1, chunks, 0)
        fun createChunksVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startChunksVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endReleaseManifestBundle(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}

// automatically generated by the FlatBuffers compiler, do not modify

package LeagueToolkit.IO.ReleaseManifestFile

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class ReleaseManifestChunkingParameter : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ReleaseManifestChunkingParameter {
        __init(_i, _bb)
        return this
    }
    val id : UShort
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getShort(o + bb_pos).toUShort() else 0u
        }
    val unknown1 : Byte
        get() {
            val o = __offset(6)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    val unknown2 : Byte
        get() {
            val o = __offset(8)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    val unknown3 : Int
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    val maxUncompressedSize : Int
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsReleaseManifestChunkingParameter(_bb: ByteBuffer): ReleaseManifestChunkingParameter = getRootAsReleaseManifestChunkingParameter(_bb, ReleaseManifestChunkingParameter())
        fun getRootAsReleaseManifestChunkingParameter(_bb: ByteBuffer, obj: ReleaseManifestChunkingParameter): ReleaseManifestChunkingParameter {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createReleaseManifestChunkingParameter(builder: FlatBufferBuilder, id: UShort, unknown1: Byte, unknown2: Byte, unknown3: Int, maxUncompressedSize: Int) : Int {
            builder.startTable(5)
            addMaxUncompressedSize(builder, maxUncompressedSize)
            addUnknown3(builder, unknown3)
            addID(builder, id)
            addUnknown2(builder, unknown2)
            addUnknown1(builder, unknown1)
            return endReleaseManifestChunkingParameter(builder)
        }
        fun startReleaseManifestChunkingParameter(builder: FlatBufferBuilder) = builder.startTable(5)
        fun addID(builder: FlatBufferBuilder, id: UShort) = builder.addShort(0, id.toShort(), 0)
        fun addUnknown1(builder: FlatBufferBuilder, unknown1: Byte) = builder.addByte(1, unknown1, 0)
        fun addUnknown2(builder: FlatBufferBuilder, unknown2: Byte) = builder.addByte(2, unknown2, 0)
        fun addUnknown3(builder: FlatBufferBuilder, unknown3: Int) = builder.addInt(3, unknown3, 0)
        fun addMaxUncompressedSize(builder: FlatBufferBuilder, maxUncompressedSize: Int) = builder.addInt(4, maxUncompressedSize, 0)
        fun endReleaseManifestChunkingParameter(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
